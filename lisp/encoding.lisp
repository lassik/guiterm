(defun sorted-string-keys (hash-table)
  (let (keys)
    (maphash (lambda (key _)
               (declare (ignore _))
               (assert (stringp key))
               (push key keys))
             hash-table)
    (sort keys #'string<)))

;;

(defun write-varint (value stream)
  (assert (>= value 0))
  (loop while (> value 127)
        do (write-byte (logior 128 (logand 127 value)) stream)
        do (setf value (ash value -7)))
  (write-byte value stream)
  value)

(defun read-varint (stream)
  (let ((value 0) (shift 0))
    (loop (let ((byte (read-byte stream)))
            (setf value (logior value (ash (logand 127 byte) shift)))
            (incf shift 7)
            (when (zerop (logand 128 byte)) (return value))))))

(defun write-varbytes (bytes stream)
  (write-varint (length bytes) stream)
  (write-sequence bytes stream))

(defun read-varbytes (stream)
  (let* ((length (read-varint stream))
         (bytes (make-array length :element-type '(unsigned-byte 8))))
    (assert (= length (read-sequence bytes stream)))
    bytes))

(defun write-varstring (string stream)
  (write-varbytes (ext:convert-string-to-bytes string charset:utf-8) stream))

(defun read-varstring (stream)
  (ext:convert-string-from-bytes (read-varbytes stream) charset:utf-8))

(defun write-list (list stream)
  (write-varint (length list) stream)
  (loop for elt in list do (write-value elt stream)))

(defun read-list (stream)
  (loop repeat (read-varint stream) collect (read-value stream)))

(defun write-hash-table (hash-table stream)
  (write-varint (hash-table-count hash-table) stream)
  (dolist (key (sorted-string-keys hash-table) hash-table)
    (write-varstring key stream)
    (write-value (gethash key hash-table) stream)))

(defun read-hash-table (stream)
  (let ((hash-table (make-hash-table :test #'equal)))
    (loop repeat (read-varint stream)
          do (setf (gethash (read-varstring stream) hash-table)
                   (read-value stream)))
    hash-table))

(defconstant +type-table+
  `((0 null ,(constantly nil) ,(constantly nil))
    (1 null ,(constantly nil) ,(constantly nil))
    (2 (eql t) ,(constantly t) ,(constantly t))
    (3 list read-list write-list)
    (4 hash-table read-hash-table write-hash-table)
    (5 (array (unsigned-byte 8)) read-varbytes write-varbytes)
    (6 string read-varstring write-varstring)
    (7 integer read-varint write-varint)))

(defun read-value (stream)
  (let ((type-code (read-varint stream)))
    (dolist (entry +type-table+ (error "Unknown type code #x~X" type-code))
      (when (= type-code (first entry))
        (return (funcall (third entry) stream))))))

(defun write-value (value stream)
  (dolist (entry +type-table+ (error "Don't know how to encode ~S" value))
    (when (typep value (second entry))
      (write-varint (first entry) stream)
      (funcall (fourth entry) value stream)
      (return value))))

(defun read-toplevel (stream)
  (loop (let ((byte (read-byte stream nil nil)))
          (unless byte (return nil))
          (if (not (= 255 byte))
              (format t "Skipping byte ~2,'0X" byte)
              (let* ((claimed-crc32 (read-varint stream))
                     (bytes (read-varbytes stream))
                     (computed-crc32 (ieee-crc32 bytes)))
                (unless (= computed-crc32 claimed-crc32)
                  (error "CRC32 checksum mismatch"))
                (return (with-input-from-byte-vector (tmp bytes)
                          (read-value tmp))))))))

(defun write-toplevel (value stream)
  (let ((bytes (with-output-to-byte-vector (tmp)
                 (write-value value tmp))))
    (write-byte 255 stream)
    (write-varint (ieee-crc32 bytes) stream)
    (write-varbytes bytes stream)))
